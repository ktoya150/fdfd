import numpy as np

# Коэффициенты матрицы (A) и вектора свободных членов (b)
A = np.array([
    [0.9, 2.7, -3.8],
    [2.5, 5.8, -0.5],
    [4.5, -2.1, 3.2]
])
b = np.array([2.4, 3.5, -1.2])

# Прямой метод: метод Гаусса
def gauss_elimination(A, b):
    n = len(b)
    Ab = np.hstack([A, b.reshape(-1, 1)])  # Расширенная матрица
    for i in range(n):
        # Прямой ход: приведение к треугольному виду
        for j in range(i + 1, n):
            factor = Ab[j, i] / Ab[i, i]
            Ab[j, i:] -= factor * Ab[i, i:]
    
    # Обратный ход: нахождение решений
    x = np.zeros(n)
    for i in range(n - 1, -1, -1):
        x[i] = (Ab[i, -1] - np.dot(Ab[i, i+1:n], x[i+1:n])) / Ab[i, i]
    return x

# Метод Зейделя
def seidel_method(A, b, tol=1e-7, max_iterations=1000):
    n = len(b)
    x = np.zeros(n)  # Начальное приближение
    for it in range(max_iterations):
        x_new = np.copy(x)
        for i in range(n):
            s1 = sum(A[i, j] * x_new[j] for j in range(i))
            s2 = sum(A[i, j] * x[j] for j in range(i + 1, n))
            x_new[i] = (b[i] - s1 - s2) / A[i, i]
        
        # Проверка на сходимость
        if np.linalg.norm(x_new - x, ord=np.inf) < tol:
            return x_new, it + 1
        x = x_new
    raise ValueError("Метод Зейделя не сходится за заданное число итераций")

# Проверка сходимости для метода Зейделя
def check_convergence(A):
    D = np.diag(np.abs(A))  # Диагональная часть
    R = np.abs(A) - np.diagflat(D)  # Остальные элементы
    return np.all(D > np.sum(R, axis=1))

# Решение
try:
    # Прямой метод
    solution_gauss = gauss_elimination(A, b)
    print("Решение методом Гаусса:", solution_gauss)

    # Проверка сходимости
    if check_convergence(A):
        solution_seidel, iterations = seidel_method(A, b)
        print("Решение методом Зейделя:", solution_seidel)
        print("Количество итераций:", iterations)
    else:
        print("Метод Зейделя не сходится для данной матрицы.")
except Exception as e:
    print("Ошибка:", e)
